// Generated by view binder compiler. Do not edit!
package com.extrotarget.extropos.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.extrotarget.extropos.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPosBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RecyclerView posCartRecycler;

  @NonNull
  public final MaterialButton posCheckoutButton;

  @NonNull
  public final TextView posItemsCount;

  @NonNull
  public final FrameLayout posProductsContainer;

  @NonNull
  public final TextView posSubtotal;

  @NonNull
  public final TextView posTax;

  @NonNull
  public final TextView posTotal;

  private FragmentPosBinding(@NonNull LinearLayout rootView, @NonNull RecyclerView posCartRecycler,
      @NonNull MaterialButton posCheckoutButton, @NonNull TextView posItemsCount,
      @NonNull FrameLayout posProductsContainer, @NonNull TextView posSubtotal,
      @NonNull TextView posTax, @NonNull TextView posTotal) {
    this.rootView = rootView;
    this.posCartRecycler = posCartRecycler;
    this.posCheckoutButton = posCheckoutButton;
    this.posItemsCount = posItemsCount;
    this.posProductsContainer = posProductsContainer;
    this.posSubtotal = posSubtotal;
    this.posTax = posTax;
    this.posTotal = posTotal;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPosBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPosBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pos, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPosBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.pos_cart_recycler;
      RecyclerView posCartRecycler = ViewBindings.findChildViewById(rootView, id);
      if (posCartRecycler == null) {
        break missingId;
      }

      id = R.id.pos_checkout_button;
      MaterialButton posCheckoutButton = ViewBindings.findChildViewById(rootView, id);
      if (posCheckoutButton == null) {
        break missingId;
      }

      id = R.id.pos_items_count;
      TextView posItemsCount = ViewBindings.findChildViewById(rootView, id);
      if (posItemsCount == null) {
        break missingId;
      }

      id = R.id.pos_products_container;
      FrameLayout posProductsContainer = ViewBindings.findChildViewById(rootView, id);
      if (posProductsContainer == null) {
        break missingId;
      }

      id = R.id.pos_subtotal;
      TextView posSubtotal = ViewBindings.findChildViewById(rootView, id);
      if (posSubtotal == null) {
        break missingId;
      }

      id = R.id.pos_tax;
      TextView posTax = ViewBindings.findChildViewById(rootView, id);
      if (posTax == null) {
        break missingId;
      }

      id = R.id.pos_total;
      TextView posTotal = ViewBindings.findChildViewById(rootView, id);
      if (posTotal == null) {
        break missingId;
      }

      return new FragmentPosBinding((LinearLayout) rootView, posCartRecycler, posCheckoutButton,
          posItemsCount, posProductsContainer, posSubtotal, posTax, posTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
