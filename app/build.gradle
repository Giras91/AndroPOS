apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    namespace = 'com.extrotarget.extropos'
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.extrotarget.extropos"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    // Use compilerOptions DSL for Kotlin Gradle Plugin 2.x
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        compilerOptions {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21)
        }
    }
}

dependencies {
    kapt "org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.0"
    // Ensure OkHttp BOM is recognized and its versions enforced for dependency alignment (required by io.appwrite SDK)
    implementation enforcedPlatform('com.squareup.okhttp3:okhttp-bom:4.12.0')
    // Also add a direct OkHttp implementation so an Android-compatible library variant is available to the consumer
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // AndroidX libraries
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.fragment:fragment-ktx:1.6.2"
    implementation "androidx.activity:activity-ktx:1.8.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.7.0"
    implementation "androidx.recyclerview:recyclerview:1.3.2"

    // Material Design
    implementation "com.google.android.material:material:1.11.0"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:2.7.6"
    implementation "androidx.navigation:navigation-ui-ktx:2.7.6"

    // Hilt
    implementation "com.google.dagger:hilt-android:2.52"
    kapt "com.google.dagger:hilt-compiler:2.52"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:1.15.0"

    // Appwrite SDK (exclude transitive okhttp-bom to avoid platform variant mismatch)
    implementation ("io.appwrite:sdk-for-android:5.0.0") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp-bom'
    }

    // Room (for future use)
    implementation "androidx.room:room-runtime:2.7.0"
    implementation "androidx.room:room-ktx:2.7.0"
    kapt "androidx.room:room-compiler:2.7.0"

    // Feature modules
    implementation project(':modules:feature-printer')
}

// Defensive JaCoCo report task (uses Provider API to avoid eager reads of transform outputs)
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.10"
}

// Register a jacocoTestReport that uses Providers to access transform outputs lazily.
// This prevents errors like: "Querying the mapped value of task ':app:transformDebugUnitTestClassesWithAsm' property 'jarsOutputDir' before task has completed is not supported"
tasks.register("jacocoTestReport", JacocoReport) { reportTask ->
    // wire to unit test task if present
    def unitTestTask = tasks.findByName("testDebugUnitTest") ?: tasks.findByName("test")
    if (unitTestTask != null) {
        reportTask.dependsOn unitTestTask
    }

    reports {
        xml.required = true
        html.required = true
    }

    // Try to reference the AGP transform task lazily. If it's not present, fall back to compiled classes directory.
    try {
        def asmTaskProvider = tasks.named("transformDebugUnitTestClassesWithAsm")
        // Use flatMap to obtain the jarsOutputDir provider without forcing its value now
        def jarsProvider = asmTaskProvider.flatMap { t ->
            // t may expose a property 'jarsOutputDir' (Provider<File>) on newer AGP versions
            // use Groovy safe-navigation to avoid hard failure if property missing
            try {
                return t.jarsOutputDir
            } catch (MissingPropertyException mpe) {
                // If the property isn't available, return provider of empty file collection
                return project.providers.provider { project.files() }
            }
        }
        classDirectories.setFrom(files(jarsProvider))
    } catch (org.gradle.api.UnknownTaskException ute) {
        // transform task not registered at this point; use a safe fallback
        classDirectories.setFrom(fileTree(dir: "$buildDir/intermediates/javac/debug/classes", includes: ['**/*.class']))
    }

    // Source dirs and potential execution data locations
    sourceDirectories.setFrom(files("${projectDir}/src/main/java", "${projectDir}/src/main/kotlin"))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["**/jacoco/*.exec", "**/outputs/code-coverage/connected/*coverage.ec"]))
}