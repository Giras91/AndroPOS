apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    namespace = 'com.extrotarget.extropos'
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.extrotarget.extropos"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    // Ensure Hilt tests use the HiltTestApplication so Hilt's testing components can be
    // injected. This sets the application class used by the instrumentation test process.
    testInstrumentationRunnerArguments = ["application": "dagger.hilt.android.testing.HiltTestApplication"]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // Use compilerOptions DSL for Kotlin Gradle Plugin 2.x
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        compilerOptions {
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)
        }
    }
}

dependencies {
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.recyclerview
    implementation libs.material
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    implementation libs.coroutines.android
    implementation enforcedPlatform(libs.okhttp.bom)
    implementation libs.okhttp
    implementation libs.retrofit.core
    implementation libs.retrofit.converter.moshi
    implementation libs.moshi.kotlin
    implementation(libs.appwrite.sdk) {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp-bom'
    }
    implementation libs.room.runtime
    implementation libs.room.ktx
    kapt libs.room.compiler
    implementation project(':modules:feature-printer')
    // AndroidX Security for EncryptedSharedPreferences (LocalAuthManager)
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    // AndroidX GridLayout for dashboard layout
    implementation "androidx.gridlayout:gridlayout:1.0.0"
    // DataStore for dashboard mode persistence
    implementation "androidx.datastore:datastore-preferences:1.1.1"
    
    // PDF generation libraries
    implementation 'com.itextpdf:itext7-core:7.2.5'
    implementation 'com.itextpdf:html2pdf:4.0.5'
    
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    // Instrumentation tests (Espresso + AndroidX Test)
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    // Fragment testing
    androidTestImplementation 'androidx.fragment:fragment-testing:1.6.1'
    // Hilt testing
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.52'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.52'
}

// Defensive JaCoCo report task (uses Provider API to avoid eager reads of transform outputs)
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.10"
}

// Register a jacocoTestReport that uses Providers to access transform outputs lazily.
// This prevents errors like: "Querying the mapped value of task ':app:transformDebugUnitTestClassesWithAsm' property 'jarsOutputDir' before task has completed is not supported"
tasks.register("jacocoTestReport", JacocoReport) { reportTask ->
    // wire to unit test task if present
    def unitTestTask = tasks.findByName("testDebugUnitTest") ?: tasks.findByName("test")
    if (unitTestTask != null) {
        reportTask.dependsOn unitTestTask
    }

    reports {
        xml.required = true
        html.required = true
    }

    // Try to reference the AGP transform task lazily. If it's not present, fall back to compiled classes directory.
    try {
        def asmTaskProvider = tasks.named("transformDebugUnitTestClassesWithAsm")
        // Use flatMap to obtain the jarsOutputDir provider without forcing its value now
        def jarsProvider = asmTaskProvider.flatMap { t ->
            // t may expose a property 'jarsOutputDir' (Provider<File>) on newer AGP versions
            // use Groovy safe-navigation to avoid hard failure if property missing
            try {
                return t.jarsOutputDir
            } catch (MissingPropertyException mpe) {
                // If the property isn't available, return provider of empty file collection
                return project.providers.provider { project.files() }
            }
        }
        classDirectories.setFrom(files(jarsProvider))
    } catch (org.gradle.api.UnknownTaskException ute) {
        // transform task not registered at this point; use a safe fallback
        classDirectories.setFrom(fileTree(dir: "$buildDir/intermediates/javac/debug/classes", includes: ['**/*.class']))
    }

    // Source dirs and potential execution data locations
    sourceDirectories.setFrom(files("${projectDir}/src/main/java", "${projectDir}/src/main/kotlin"))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["**/jacoco/*.exec", "**/outputs/code-coverage/connected/*coverage.ec"]))
}